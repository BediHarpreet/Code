import java.util.ArrayList;

public class RecursiveMergeSort {
	
	public static void main(String[] args){
		int[] arr = {1,2,3,4,5,6};
		ArrayList<Integer> val = new ArrayList<>();
		val.add(1);
		val.get(0);
		String str = "Hello 1";
		str.split(" ");
	}
	
	   static void superStack(String[] operations) {
	        Scanner scan = new Scanner(System.in);
	        String str; 
	        StackImpl stack = new StackImpl();
	        scan.nextLine();// To ignore the first number.
	        while((str = scan.nextLine()) !=null){
	            String command = str.split(" ")[0];
	            Integer value = Integer.valueOf(str.split(" ")[1]);
	            switch(command.toLowerCase()){
	                case "push":
	                    stack.push(value);
	                case "pop":
	                    System.out.println(stack.pop());
	                case "inc":
	                    stack.inc(value, Integer.valueOf(str.split(" ")[2]));
	            }
	        }

	    }

	public static class StackImpl{
	    
	    ArrayList<Integer> list = new ArrayList<Integer>();
	    
	    public void push(Integer i){
	        list.add(i);
	    }
	    
	    public Integer pop(){
	        return list.remove(list.size() - 1);
	        
	    }
	    
	    public Integer peak(){
	        return list.get(list.size() - 1);
	    }
	    
	    public void inc(int elementsChanged, int incrementBy){
	        int val = elementsChanged;
	        while( val > 0){
	            int oldValue = list.get(list.size() - 1 - val);
	            list.set(list.size() - 1 - val, oldValue + incrementBy);
	        }
	    }
	    
	}



}
